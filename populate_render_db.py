import os
import django
from pathlib import Path

# Setup Django
BASE_DIR = Path(__file__).resolve().parent.parent
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rental.settings')

# Configure Django for production database
os.environ['DATABASE_URL'] = 'postgresql://qlda_cntt_user:h7fXXiWBBOPhF3sFO7fXiKvKdxFk9t4F@dpg-d211263ipnbc38cq9sg-a.singapore-postgres.render.com/qlda_cntt?sslmode=require'

django.setup()

from django.contrib.auth import get_user_model
from core.models import Room, Contract, Invoice, Payment
from decimal import Decimal
from datetime import datetime, timedelta
from django.utils import timezone

User = get_user_model()

def create_sample_data():
    print('üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u tr√™n database Render...')
    
    # T·∫°o user admin
    admin_user, created = User.objects.get_or_create(
        username='admin',
        defaults={
            'email': 'admin@3hrental.com',
            'first_name': 'Admin',
            'last_name': 'System',
            'role': 'ADMIN',
            'is_staff': True,
            'is_superuser': True,
        }
    )
    if created:
        admin_user.set_password('admin123')
        admin_user.save()
        print(f'‚úì T·∫°o admin user: {admin_user.username}')
    else:
        print(f'Admin user ƒë√£ t·ªìn t·∫°i: {admin_user.username}')

    # T·∫°o landlord users
    landlords_data = [
        {
            'username': 'landlord1',
            'email': 'landlord1@3hrental.com',
            'first_name': 'Nguy·ªÖn',
            'last_name': 'VƒÉn A',
            'phone': '0901234567',
            'role': 'LANDLORD'
        },
        {
            'username': 'landlord2',
            'email': 'landlord2@3hrental.com',
            'first_name': 'Tr·∫ßn',
            'last_name': 'Th·ªã B',
            'phone': '0902345678',
            'role': 'LANDLORD'
        }
    ]
    
    landlords = []
    for data in landlords_data:
        user, created = User.objects.get_or_create(
            username=data['username'],
            defaults=data
        )
        if created:
            user.set_password('password123')
            user.save()
            print(f'‚úì T·∫°o landlord: {user.username}')
        landlords.append(user)

    # T·∫°o tenant users
    tenants_data = [
        {
            'username': 'tenant1',
            'email': 'tenant1@gmail.com',
            'first_name': 'L√™',
            'last_name': 'VƒÉn C',
            'phone': '0903456789',
            'role': 'TENANT',
            'id_number': '123456789',
            'address': '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
            'occupation': 'Nh√¢n vi√™n vƒÉn ph√≤ng',
            'workplace': 'C√¥ng ty XYZ'
        },
        {
            'username': 'tenant2',
            'email': 'tenant2@gmail.com',
            'first_name': 'Ph·∫°m',
            'last_name': 'Th·ªã D',
            'phone': '0904567890',
            'role': 'TENANT',
            'id_number': '987654321',
            'address': '456 ƒê∆∞·ªùng DEF, Qu·∫≠n 2, TP.HCM',
            'occupation': 'Sinh vi√™n',
            'workplace': 'ƒê·∫°i h·ªçc ABC'
        },
        {
            'username': 'tenant3',
            'email': 'tenant3@gmail.com',
            'first_name': 'Ho√†ng',
            'last_name': 'VƒÉn E',
            'phone': '0905678901',
            'role': 'TENANT',
            'id_number': '456789123',
            'address': '789 ƒê∆∞·ªùng GHI, Qu·∫≠n 3, TP.HCM',
            'occupation': 'K·ªπ s∆∞',
            'workplace': 'C√¥ng ty DEF'
        }
    ]
    
    tenants = []
    for data in tenants_data:
        user, created = User.objects.get_or_create(
            username=data['username'],
            defaults=data
        )
        if created:
            user.set_password('password123')
            user.save()
            print(f'‚úì T·∫°o tenant: {user.username}')
        tenants.append(user)

    # T·∫°o rooms
    rooms_data = [
        {
            'name': 'Ph√≤ng A101',
            'description': 'Ph√≤ng tr·ªç ƒë·∫ßy ƒë·ªß ti·ªán nghi, ƒëi·ªÅu h√≤a, t·ªß l·∫°nh, m√°y gi·∫∑t',
            'address': '123 Nguy·ªÖn VƒÉn Linh, Qu·∫≠n 7, TP.HCM',
            'price': Decimal('3500000'),
            'area': 25.0,
            'landlord': landlords[0],
            'status': 'RENTED',
            'owner_name': 'Nguy·ªÖn VƒÉn A',
            'owner_phone': '0901234567',
            'owner_email': 'landlord1@3hrental.com'
        },
        {
            'name': 'Ph√≤ng A102',
            'description': 'Ph√≤ng tr·ªç s·∫°ch s·∫Ω, an ninh t·ªët, g·∫ßn tr∆∞·ªùng h·ªçc',
            'address': '123 Nguy·ªÖn VƒÉn Linh, Qu·∫≠n 7, TP.HCM',
            'price': Decimal('3200000'),
            'area': 22.0,
            'landlord': landlords[0],
            'status': 'AVAILABLE',
            'owner_name': 'Nguy·ªÖn VƒÉn A',
            'owner_phone': '0901234567',
            'owner_email': 'landlord1@3hrental.com'
        },
        {
            'name': 'Ph√≤ng B201',
            'description': 'Ph√≤ng studio cao c·∫•p, view ƒë·∫πp, ƒë·∫ßy ƒë·ªß n·ªôi th·∫•t',
            'address': '456 L√™ VƒÉn Vi·ªát, Qu·∫≠n 9, TP.HCM',
            'price': Decimal('4500000'),
            'area': 30.0,
            'landlord': landlords[1],
            'status': 'RENTED',
            'owner_name': 'Tr·∫ßn Th·ªã B',
            'owner_phone': '0902345678',
            'owner_email': 'landlord2@3hrental.com'
        },
        {
            'name': 'Ph√≤ng B202',
            'description': 'Ph√≤ng tr·ªç b√¨nh d√¢n, gi√° r·∫ª, g·∫ßn ch·ª£ v√† b·∫øn xe',
            'address': '456 L√™ VƒÉn Vi·ªát, Qu·∫≠n 9, TP.HCM',
            'price': Decimal('2800000'),
            'area': 18.0,
            'landlord': landlords[1],
            'status': 'MAINTENANCE',
            'owner_name': 'Tr·∫ßn Th·ªã B',
            'owner_phone': '0902345678',
            'owner_email': 'landlord2@3hrental.com'
        },
        {
            'name': 'Ph√≤ng C301',
            'description': 'Ph√≤ng tr·ªç cao c·∫•p, ban c√¥ng r·ªông, tho√°ng m√°t',
            'address': '789 V√µ VƒÉn T·∫ßn, Qu·∫≠n 3, TP.HCM',
            'price': Decimal('5000000'),
            'area': 35.0,
            'landlord': landlords[0],
            'status': 'AVAILABLE',
            'owner_name': 'Nguy·ªÖn VƒÉn A',
            'owner_phone': '0901234567',
            'owner_email': 'landlord1@3hrental.com'
        }
    ]
    
    rooms = []
    for data in rooms_data:
        room, created = Room.objects.get_or_create(
            name=data['name'],
            defaults=data
        )
        if created:
            print(f'‚úì T·∫°o ph√≤ng: {room.name}')
        rooms.append(room)

    # T·∫°o contracts cho rooms ƒëang ƒë∆∞·ª£c thu√™
    rented_rooms = [room for room in rooms if room.status == 'RENTED']
    if len(rented_rooms) >= 2 and len(tenants) >= 2:
        contracts_data = [
            {
                'room': rented_rooms[0],
                'tenant': tenants[0],
                'start_date': timezone.now().date() - timedelta(days=90),
                'end_date': timezone.now().date() + timedelta(days=275),
                'monthly_rent': rented_rooms[0].price,
                'status': 'ACTIVE',
                'notes': 'H·ª£p ƒë·ªìng thu√™ ph√≤ng A101, ƒë√£ ƒë√≥ng ti·ªÅn c·ªçc 1 th√°ng'
            },
            {
                'room': rented_rooms[1],
                'tenant': tenants[1],
                'start_date': timezone.now().date() - timedelta(days=60),
                'end_date': timezone.now().date() + timedelta(days=305),
                'monthly_rent': rented_rooms[1].price,
                'status': 'ACTIVE',
                'notes': 'H·ª£p ƒë·ªìng thu√™ ph√≤ng B201, gia h·∫°n t·ª´ h·ª£p ƒë·ªìng c≈©'
            }
        ]
        
        contracts = []
        for data in contracts_data:
            contract, created = Contract.objects.get_or_create(
                room=data['room'],
                tenant=data['tenant'],
                defaults=data
            )
            if created:
                print(f'‚úì T·∫°o h·ª£p ƒë·ªìng: {contract.room.name} - {contract.tenant.get_full_name()}')
            contracts.append(contract)

        # T·∫°o invoices
        for contract in contracts:
            # T·∫°o 3 h√≥a ƒë∆°n: 2 th√°ng tr∆∞·ªõc (ƒë√£ thanh to√°n), 1 th√°ng tr∆∞·ªõc (ƒë√£ thanh to√°n), th√°ng hi·ªán t·∫°i (ch∆∞a thanh to√°n)
            for i in range(3):
                month_offset = 2 - i  # 2, 1, 0 (th√°ng tr∆∞·ªõc -> th√°ng hi·ªán t·∫°i)
                invoice_date = timezone.now().date().replace(day=1) - timedelta(days=month_offset * 30)
                due_date = invoice_date + timedelta(days=30)
                
                invoice, created = Invoice.objects.get_or_create(
                    contract=contract,
                    invoice_date=invoice_date,
                    defaults={
                        'due_date': due_date,
                        'room_rent': contract.monthly_rent,
                        'water_cost': Decimal('150000'),
                        'electricity_cost': Decimal('200000'),
                        'other_fees': Decimal('50000') if i == 0 else Decimal('0'),
                        'total_amount': contract.monthly_rent + Decimal('150000') + Decimal('200000') + (Decimal('50000') if i == 0 else Decimal('0')),
                        'status': 'PAID' if i < 2 else 'PENDING',
                        'notes': f'H√≥a ƒë∆°n th√°ng {invoice_date.month}/{invoice_date.year}'
                    }
                )
                
                if created:
                    print(f'‚úì T·∫°o h√≥a ƒë∆°n: {contract.room.name} - {invoice_date.month}/{invoice_date.year}')
                    
                    # T·∫°o payment cho h√≥a ƒë∆°n ƒë√£ thanh to√°n
                    if invoice.status == 'PAID':
                        payment, payment_created = Payment.objects.get_or_create(
                            invoice=invoice,
                            defaults={
                                'amount': invoice.total_amount,
                                'payment_date': invoice_date + timedelta(days=5),
                                'payment_method': 'CASH' if i % 2 == 0 else 'BANK_TRANSFER',
                                'notes': f'Thanh to√°n h√≥a ƒë∆°n th√°ng {invoice_date.month}/{invoice_date.year}'
                            }
                        )
                        if payment_created:
                            print(f'‚úì T·∫°o thanh to√°n: {payment.amount:,}ƒë cho h√≥a ƒë∆°n {invoice_date.month}/{invoice_date.year}')

    print('\nüéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u tr√™n database Render!')
    print('\nTh√¥ng tin ƒëƒÉng nh·∫≠p:')
    print('üë§ Admin: admin / admin123')
    print('üè† Landlord: landlord1 / password123')
    print('üè† Landlord: landlord2 / password123')
    print('üë• Tenant: tenant1 / password123')
    print('üë• Tenant: tenant2 / password123')
    print('üë• Tenant: tenant3 / password123')

if __name__ == '__main__':
    try:
        create_sample_data()
    except Exception as e:
        print(f'‚ùå L·ªói: {e}')
        import traceback
        traceback.print_exc()
